import { createSlice } from "@reduxjs/toolkit";
// import { fetchCount } from './counterAPI';

const initialState = {
  mode: "light",
  chats: [],
  token: null,
  user: null,
  selectChat: null, // Store the currently selected chat ID
  // notifications: [],
};
export const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    setMode: (state) => {
      state.mode = state.mode === "light" ? "dark" : "light";
    },

    setLogin: (state, action) => {
      state.user = action.payload.user;
      state.token = action.payload.token;
    },
    setLogout: (state) => {
      state.user = null;
      state.token = null;
    },
    addChat: (state, action) => {
      state.chats = action.payload; // This line should be fine
      // console.log(action);
    },

    // addNotification: (state, action) => {
    //   // state.notifications = action.payload;
    //   // state.notifications.push(action.payload);
    //   // state.notifications = [...state.notifications, ...action.payload];
    //   // console.log("addNoti payload...", action.payload);
    // },
    // clearNotifications: (state) => {
    //   state.notifications = [];
    // },

    // updateChatName: (state, action) => {
    //   const chatId = action.payload.chatId;
    //   const newChatName = action.payload.newChatName;

    //   // Update the name in the selectedChat state
    //   state.selectChat.chatName = newChatName;

    //   // Update the name in the chats state (assuming chats is an array of chats)
    //   const chatToUpdate = state.chats.find((chat) => chat._id === chatId);
    //   if (chatToUpdate) {
    //     chatToUpdate.chatName = newChatName;
    //   }
    // },

    // state.chats = action.payload; //Add a new chat to the chats array
    selectChat: (state, action) => {
      state.selectChat = action.payload; //Set the selected chat ID
      // return { ...state, selectChat: action.payload };
      // console.log(action);
    },
    // sendMessage: (state, action) => {
    //   const { chatId, message } = action.payload;
    //   const chat = state.chats.find((chat) => chat.id === chatId);
    //   if (chat) {
    //     chat.messages.push(message); // Add a new message to the selected chat
    //   }
    // },
    // setGroupChat: (state, action) => {
    //   state.groupmassages = action.payload.groupmassages;
    // },
    // Use the PayloadAction type to declare the contents of `action.payload`
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = "loading";
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = "idle";
  //       state.value += action.payload;
  //     });
  // },
});

export const {
  selectChat,
  addChat,
  sendMessage,
  setMode,
  setLogin,
  setLogout,
  setChat,
  setGroupChat,
  addNotification,
  clearNotifications,
} = authSlice.actions;
// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default authSlice.reducer;
